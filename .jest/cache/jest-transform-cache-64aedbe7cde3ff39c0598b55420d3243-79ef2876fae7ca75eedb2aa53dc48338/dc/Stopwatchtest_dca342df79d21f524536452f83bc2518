a77c311b9af4c02beaf7b9f18b0dbfe9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Stopwatch = _interopRequireDefault(require("../src/Stopwatch"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Stopwatch', function () {
  test('renders initial state correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Stopwatch.default, {})),
      getByText = _render.getByText,
      queryByTestId = _render.queryByTestId;
    expect(getByText('00:00:00')).toBeTruthy();
    expect(queryByTestId('lap-list')).toBeNull();
  });
  test('starts and stops the stopwatch', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Stopwatch.default, {})),
      getByText = _render2.getByText,
      queryByText = _render2.queryByText;
    _reactNative.fireEvent.press(getByText('Start'));
    expect(queryByText(/(\d{2}:){2}\d{2}/)).toBeTruthy();
    _reactNative.fireEvent.press(getByText('Stop'));
    expect(queryByText(/(\d{2}:){2}\d{2}/)).toBeNull();
  });
  test('pauses and resumes the stopwatch', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Stopwatch.default, {})),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('Start'));
    _reactNative.fireEvent.press(getByText('Pause'));
    var pausedTime = getByText(/(\d{2}:){2}\d{2}/).textContent;
    _reactNative.fireEvent.press(getByText('Resume'));
    expect(getByText(/(\d{2}:){2}\d{2}/).textContent).not.toBe(pausedTime);
  });
  test('records and displays lap times', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Stopwatch.default, {})),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    _reactNative.fireEvent.press(getByText('Start'));
    _reactNative.fireEvent.press(getByText('Lap'));
    expect(getByTestId('lap-list')).toContainElement(getByText(/(\d{2}:){2}\d{2}/));
    _reactNative.fireEvent.press(getByText('Lap'));
    expect(getByTestId('lap-list').children.length).toBe(2);
  });
  test('resets the stopwatch', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Stopwatch.default, {})),
      getByText = _render5.getByText,
      queryByTestId = _render5.queryByTestId;
    _reactNative.fireEvent.press(getByText('Start'));
    _reactNative.fireEvent.press(getByText('Lap'));
    _reactNative.fireEvent.press(getByText('Reset'));
    expect(getByText('00:00:00')).toBeTruthy();
    expect(queryByTestId('lap-list')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9TdG9wd2F0Y2giLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZ2V0QnlUZXh0IiwicXVlcnlCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0JlTnVsbCIsIl9yZW5kZXIyIiwicXVlcnlCeVRleHQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIl9yZW5kZXIzIiwicGF1c2VkVGltZSIsInRleHRDb250ZW50Iiwibm90IiwidG9CZSIsIl9yZW5kZXI0IiwiZ2V0QnlUZXN0SWQiLCJ0b0NvbnRhaW5FbGVtZW50IiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJfcmVuZGVyNSJdLCJzb3VyY2VzIjpbIlN0b3B3YXRjaC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgU3RvcHdhdGNoIGZyb20gJy4uL3NyYy9TdG9wd2F0Y2gnO1xyXG5cclxuZGVzY3JpYmUoJ1N0b3B3YXRjaCcsICgpID0+IHtcclxuICB0ZXN0KCdyZW5kZXJzIGluaXRpYWwgc3RhdGUgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8U3RvcHdhdGNoIC8+KTtcclxuXHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJzAwOjAwOjAwJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChxdWVyeUJ5VGVzdElkKCdsYXAtbGlzdCcpKS50b0JlTnVsbCgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzdGFydHMgYW5kIHN0b3BzIHRoZSBzdG9wd2F0Y2gnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8U3RvcHdhdGNoIC8+KTtcclxuICAgIFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnU3RhcnQnKSk7XHJcbiAgICBleHBlY3QocXVlcnlCeVRleHQoLyhcXGR7Mn06KXsyfVxcZHsyfS8pKS50b0JlVHJ1dGh5KCk7XHJcblxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnU3RvcCcpKTtcclxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgvKFxcZHsyfTopezJ9XFxkezJ9LykpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3BhdXNlcyBhbmQgcmVzdW1lcyB0aGUgc3RvcHdhdGNoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8U3RvcHdhdGNoIC8+KTtcclxuICAgIFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnU3RhcnQnKSk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdQYXVzZScpKTtcclxuICAgIGNvbnN0IHBhdXNlZFRpbWUgPSBnZXRCeVRleHQoLyhcXGR7Mn06KXsyfVxcZHsyfS8pLnRleHRDb250ZW50O1xyXG5cclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1Jlc3VtZScpKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoLyhcXGR7Mn06KXsyfVxcZHsyfS8pLnRleHRDb250ZW50KS5ub3QudG9CZShwYXVzZWRUaW1lKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgncmVjb3JkcyBhbmQgZGlzcGxheXMgbGFwIHRpbWVzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoPFN0b3B3YXRjaCAvPik7XHJcbiAgICBcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ1N0YXJ0JykpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnTGFwJykpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdsYXAtbGlzdCcpKS50b0NvbnRhaW5FbGVtZW50KGdldEJ5VGV4dCgvKFxcZHsyfTopezJ9XFxkezJ9LykpO1xyXG5cclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ0xhcCcpKTtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnbGFwLWxpc3QnKS5jaGlsZHJlbi5sZW5ndGgpLnRvQmUoMik7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Jlc2V0cyB0aGUgc3RvcHdhdGNoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8U3RvcHdhdGNoIC8+KTtcclxuICAgIFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgnU3RhcnQnKSk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdMYXAnKSk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCdSZXNldCcpKTtcclxuXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcwMDowMDowMCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnbGFwLWxpc3QnKSkudG9CZU51bGwoKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUF5QyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFFekNJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBTTtFQUMxQkMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLFlBQU07SUFDNUMsSUFBQUMsT0FBQSxHQUFxQyxJQUFBQyxtQkFBTSxFQUFDLElBQUFK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