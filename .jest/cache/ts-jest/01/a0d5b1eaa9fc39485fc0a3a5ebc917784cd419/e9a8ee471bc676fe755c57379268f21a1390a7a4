[["/Users/victor/development/react_native_projects/eng-intern-assessment-react-native/src/StopWatch.tsx",{"fileContent":"import React, { useState, useRef, useCallback } from \"react\";\nimport { StyleSheet, SafeAreaView, Text, View, Platform } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport Constants from \"expo-constants\";\nimport Result from \"../components/Result\";\nimport StopWatchButton from \"./StopWatchButton\";\nimport { displayTime } from \"../components/util\";\nimport MyHeader from \"../components/Header\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"black\",\n    paddingTop: Constants.statusBarHeight,\n  },\n  display: {\n    flex: 3 / 5,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  displayText: {\n    color: \"#fff\",\n    fontSize: 70,\n    fontWeight: \"200\",\n    fontFamily: Platform.OS === \"ios\" ? \"Helvetica Neue\" : \"\",\n  },\n\n  control: {\n    height: 70,\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n  },\n\n  results: {\n    flex: 2 / 5,\n  },\n});\n\nexport default function StopWatch() {\n  const [time, setTime] = useState<number>(0);\n  const [isRunning, setRunning] = useState<boolean>(false);\n  const [results, setResults] = useState<number[]>([]);\n  const timerRef = useRef<NodeJS.Timeout>();\n\n  const handleLeftButtonPress = useCallback(() => {\n    if (isRunning) {\n      setResults((previousResults) => [time, ...previousResults]);\n    } else {\n      setResults([]);\n      setTime(0);\n    }\n  }, [isRunning, time]);\n  const handleRightButtonPress = useCallback(() => {\n    if (!isRunning) {\n      const interval = setInterval(() => {\n        setTime((previousTime) => previousTime + 1);\n      }, 10);\n\n      timerRef.current = interval;\n    } else {\n      clearInterval(timerRef.current);\n    }\n\n    setRunning((previousState: boolean) => !previousState);\n  }, [isRunning]);\n\n  return (\n    <SafeAreaProvider>\n      <SafeAreaView style={styles.container}>\n        <MyHeader />\n        <StatusBar />\n        <View style={styles.display}>\n          <Text style={{ color: \"white\", fontSize: 20 }}>{displayTime(time)}</Text>\n        </View>\n\n        <View style={styles.control}>\n          <StopWatchButton\n            isRunning={isRunning}\n            handleLeftButtonPress={handleLeftButtonPress}\n            handleRightButtonPress={handleRightButtonPress}\n          />\n        </View>\n\n        <View testID=\"la\" style={styles.results}>\n          <Result results={results} ></Result>\n        </View>\n      </SafeAreaView>\n    </SafeAreaProvider>\n  );\n}\n","resolvedModuleNames":["/Users/victor/development/react_native_projects/eng-intern-assessment-react-native/components/Result.tsx","/Users/victor/development/react_native_projects/eng-intern-assessment-react-native/src/StopWatchButton.tsx","/Users/victor/development/react_native_projects/eng-intern-assessment-react-native/components/util.tsx","/Users/victor/development/react_native_projects/eng-intern-assessment-react-native/components/Header.tsx"]}]]